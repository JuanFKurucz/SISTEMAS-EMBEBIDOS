#define OS_TIME_DLY_HMSM_EN 1
#define OS_TASK_DEL_EN 1
#memmap xmem
#use "ucos2.lib"
#use "IO.lib"
#use "LED.lib"
#use GPS_Custom.LIB


void obtenerDatosGps(void *data){
   char algo[100];
   int resultado;
	while(1){
      resultado = GPS_gets(algo);
   	printf("%d: %s\n",resultado,algo);
      OSTimeDlySec(1);
   }
}

void leerPuertoD(char texto[]){
   int caracter;
   int indice;
   indice = 0;
   caracter = serDpeek();
  	if(caracter == -1){
	  //   return;
	  }
   while(1){
      caracter = serDgetc();
      printf("Caracter (%d): %c\n",caracter,caracter);
      if(caracter == -1){
      	OSTimeDlyHMSM(0,0,0,100);
    	} else {
         if(caracter == '\n'){
           return;
         } else {
         	texto[indice] = caracter;
            indice++;
         }
      }
   }

}

void prenderModem(){
  if (!BitRdPortI(PBDR, 7)){
    BitWrPortI(PEDDR,&PEDDRShadow,0,4);
    OSTimeDlyHMSM(0,0,0,50);
    BitWrPortI(PEDDR,&PEDDRShadow,1,4);
    BitWrPortI(PEDR,&PEDRShadow,0,4);
    OSTimeDlyHMSM(0,0,2,0);
    BitWrPortI(PEDDR,&PEDDRShadow,0,4);
  }
  BitWrPortI(PEDR,&PEDRShadow, BitRdPortI(PBDR, 7), 0);
}

void comunicarseModem(char * texto){
 serDputs(texto);
 serDputc('\r');
}

void modem(void *data){
  char texto[10];
  int status;
  char received[100];

  while(1)
  {
  		status = IO_getInput(PORT_E, BIT_1);
      while( !status )
      {
          BitWrPortI(PEDDR,&PEDDRShadow,OUTPUT_DIR,BIT_4);
          BitWrPortI(PEDR,&PEDRShadow,0,BIT_4);
          OSTimeDlySec(2);
          BitWrPortI(PEDDR,&PEDDRShadow,INPUT_DIR,BIT_4);
          status = IO_getInput(PORT_E, BIT_1);
          if (status ) LED_SET(BIT_7);
          else LED_RESET(BIT_7);
      }
      comunicarseModem("A");
   	OSTimeDlyHMSM(0,0,5,0);
   	comunicarseModem("AT");
   	OSTimeDlyHMSM(0,0,0,100);
      while( !serDrdUsed() )
      {
         OSTimeDlyHMSM(0,0,0,100);
      }
      memset(received, 0, sizeof(received));
      serDread( received, 100, 100 );
      printf(received);

      comunicarseModem("AT+CPIN?");
   	OSTimeDlyHMSM(0,0,0,100);
      while( !serDrdUsed() )
      {
         OSTimeDlyHMSM(0,0,0,100);
      }
      memset(received, 0, sizeof(received));
      serDread( received, 100, 100 );
      printf(received);

      comunicarseModem("AT+CPIN=5454");
   	OSTimeDlyHMSM(0,0,0,100);
      while( !serDrdUsed() )
      {
         OSTimeDlyHMSM(0,0,0,100);
      }
      memset(received, 0, sizeof(received));
      serDread( received, 100, 100 );
      printf(received);

      comunicarseModem("AT+CREG?");
   	OSTimeDlyHMSM(0,0,0,100);
      while( !serDrdUsed() )
      {
         OSTimeDlyHMSM(0,0,0,100);
      }
      memset(received, 0, sizeof(received));
      serDread( received, 100, 100 );
      printf(received);
      serDread( received, 100, 100 );
  }


  //prenderModem();
  while(1){
	//sserDrdFlush();
   leerPuertoD(texto);
  	printf("%s",texto);
   printf("\nbyewda\n");
	serDrdFlush();
  }
}

main(){
   HW_init();
	OSInit();
	//OSTaskCreate(GPS_init, NULL, 512, 1);
	//OSTaskCreate(obtenerDatosGps, NULL, 512, 5);
   OSTaskCreate(modem,NULL,512,6);
   OSStart();
}