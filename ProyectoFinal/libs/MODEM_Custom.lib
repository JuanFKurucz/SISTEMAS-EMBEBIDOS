/*** BeginHeader */

void * mensajeMailBox[1];
OS_EVENT * mailBoxMensajeMuerteModem;

/*** EndHeader */

/*** BeginHeader MODEM_init */
void MODEM_init();
/*** EndHeader */
void MODEM_init(){
	mailBoxMensajeMuerteModem = OSQCreate(&mensajeMailBox,1);
}

/*** BeginHeader MODEM_main */
void MODEM_main(void *data);
/*** EndHeader */
//Funcion que contiene diferentes tareas del modem
void MODEM_main(void *data){
	char texto[10];
	int status;
	char received[50];
	int h;
	void* punteroMensaje;
	INT8U timeout;
	INT8U err;
	h=0;
	while(1)
	{
		status = IO_getInput(PORT_E, BIT_1);
		while(!status)
		{
			BitWrPortI(PEDDR,&PEDDRShadow,OUTPUT_DIR,BIT_4);
			BitWrPortI(PEDR,&PEDRShadow,0,BIT_4);
			OSTimeDlySec(2);
			BitWrPortI(PEDDR,&PEDDRShadow,INPUT_DIR,BIT_4);
			status = IO_getInput(PORT_E, BIT_1);
			if (status ) LED_SET(BIT_7);
			else LED_RESET(BIT_7);
		}
		MODEM_comunicarse("A");
		OSTimeDlyHMSM(0,0,5,0);
		MODEM_comunicarse("AT");
		OSTimeDlyHMSM(0,0,0,100);
		while( !serDrdUsed() )
		{
			OSTimeDlyHMSM(0,0,0,100);
		}
		timeout = 100;
		OSSemPend(SemaforoMensaje, 0, &err);
		punteroMensaje = OSQPend(mailBoxMensajeMuerteModem, timeout,&err);
		OSSemPost(SemaforoMensaje);
		IO_leerPuertoD(received);
		if(punteroMensaje  == (void *)0){
			printf("No hay mensaje\n");
		} else {
			printf("Mensaje nuevo\n");
			if (MODEM_ponerPin(received) == 1){
				printf("Pin puesto\n");
				OSTimeDlyHMSM(0,0,0,100);
				if(MODEM_registrarRed(received)==1){
					printf("Red registrada\n");
					OSTimeDlyHMSM(0,0,0,100);
					if(MODEM_modoTexto(received)==1){
						printf("Modo texto puesto\n");
						OSTimeDlyHMSM(0,0,0,100);
						if(MODEM_borrarMensajes(received)==1){
							printf("Mensajes borrados\n");
							OSTimeDlyHMSM(0,0,0,100);
							MODEM_enviarMensajes(received);
							printf("Enviado final\n");
						} else {
							printf("Error al borrar mensajes\n");
							OSSemPend(SemaforoMensaje, 0, &err);
							OSQPost(mailBoxMensajeMuerteModem,punteroMensaje);
							OSSemPost(SemaforoMensaje);
						}
					} else {
						printf("Error al poner modo texto\n");
						OSSemPend(SemaforoMensaje, 0, &err);
						OSQPost(mailBoxMensajeMuerteModem,punteroMensaje);
						OSSemPost(SemaforoMensaje);
					}
				} else {
					printf("Error al registrar en la red\n");
					OSSemPend(SemaforoMensaje, 0, &err);
					OSQPost(mailBoxMensajeMuerteModem,punteroMensaje);
					OSSemPost(SemaforoMensaje);
				}
			} else {
				printf("Error al poner el pin\n");
				OSSemPend(SemaforoMensaje, 0, &err);
				OSQPost(mailBoxMensajeMuerteModem,punteroMensaje);
				OSSemPost(SemaforoMensaje);
			}
		}
	}
}



/*** BeginHeader MODEM_comunicarse */
void MODEM_comunicarse(char * texto);
/*** EndHeader */
//Funcion que se comunica con el modem
void MODEM_comunicarse(char * texto){
	serDputs(texto);
	serDputc('\r');
}


/*** BeginHeader MODEM_modoTexto */
int MODEM_modoTexto(char* received);
/*** EndHeader */
//Funcion que habilita el modo texto para luego poder enviar mensajes
int MODEM_modoTexto(char* received){
	MODEM_comunicarse("AT+CMGF=1");
	memset(received, 0, sizeof(received));
	IO_leerPuertoD(received);
	if(UT_isEqual(received,"OK") == 1){
		return 1;
	}
	return 0;
}

/*** BeginHeader MODEM_enviarMensajes */
int MODEM_enviarMensajes(char* received);
/*** EndHeader */
//Funcion que envia Mensajes de texto
int MODEM_enviarMensajes(char* received){
	char buffer[255];
	char mensajeTexto[255];
	if(MODEM_modoTexto(received) == 1){
		memset(received, 0, sizeof(received));
		serDputs("AT+CMGS=\"091829233\"\r");
		while(!serDrdUsed());
		memset(received, 0, sizeof(received));
		IO_leerPuertoD(received);
		while (UT_isEqual(received,">") != 1)
		{
			memset(received, 0, sizeof(received));
			IO_leerPuertoD(received);
		}
		serDputc(0x0D);
		memset(mensajeTexto, 0, sizeof(mensajeTexto));
		strcat(mensajeTexto, "Un jugador necesita asistencia en https://www.google.com/maps/place/"); //link mejorado que funciona directamente con nuestra estructura de lat,long
		GPS_format(posicionGPS);
		strcat(mensajeTexto, cadenaGPSFormateada);
		printf("%s\n",mensajeTexto);
		serDputs(mensajeTexto);
		serDputc(0x1A);
		serDputs("\r");
		memset(received, 0, sizeof(received));
		IO_leerPuertoD(received);
		while(UT_isEqual(received,"OK") != 1){
			memset(received, 0, sizeof(received));
			IO_leerPuertoD(received);
		}
		printf("Enviado\n");
	}
}


/*** BeginHeader MODEM_borrarMensajes */
int MODEM_borrarMensajes(char* received);
/*** EndHeader */
//Funcion que borra los mensajes del celular
//Forma de liberar la bandeja de entrada
int MODEM_borrarMensajes(char * received){
	MODEM_comunicarse("AT+CMGDA=\"DEL ALL\"");
	memset(received, 0, sizeof(received));
	IO_leerPuertoD(received);
	if(UT_isEqual(received,"OK") == 1){
		return 1;
	}
	return 0;
}

/*** BeginHeader MODEM_ponerPin */
int MODEM_ponerPin(char* received);

/*** EndHeader */
//Funcion que ingresa el pin al chip
//Nuestro pin es 5454
int MODEM_ponerPin(char* received){
	MODEM_comunicarse("AT+CPIN?");
	IO_leerPuertoD(received);
	if(UT_isEqual(received,"SIM PIN") == 1){
		MODEM_comunicarse("AT+CPIN=5454");
		IO_leerPuertoD(received);
		if(UT_isEqual(received,"OK") == 1){
			return 1;
		}
	} else if(UT_isEqual(received,"OK") == 1){
		return 1;
	}
	return 0;
}


/*** BeginHeader MODEM_registrarRed */
int MODEM_registrarRed(char* received);
/*** EndHeader */
//Funcion que registra el chip en la red
//En nuestro caso el registro es para Antel
int MODEM_registrarRed(char* received){
	MODEM_comunicarse("AT+CREG?");
	memset(received, 0, sizeof(received));
	IO_leerPuertoD(received);
	if(UT_isEqual(received,"0,1") == 1){
		return 1;
	}
	else{
		//Registro para Antel: "AT+COPS=1,2,\"74801\"\r"
		MODEM_comunicarse("AT+COPS=1,2,\"74801\"");
		OSTimeDlySec(1);
		return MODEM_registrarRed(received);
	}
	return 0;
}


/*** BeginHeader MODEM_prender */
void MODEM_prender();
/*** EndHeader */
//Funcion que prende el Modem
void MODEM_prender(){
	if (!BitRdPortI(PBDR, 7)){
		BitWrPortI(PEDDR,&PEDDRShadow,0,4);
		OSTimeDlyHMSM(0,0,0,50);
		BitWrPortI(PEDDR,&PEDDRShadow,1,4);
		BitWrPortI(PEDR,&PEDRShadow,0,4);
		OSTimeDlyHMSM(0,0,2,0);
		BitWrPortI(PEDDR,&PEDDRShadow,0,4);
	}
	BitWrPortI(PEDR,&PEDRShadow, BitRdPortI(PBDR, 7), 0);
}
