/*
	Funcion que se encarga de generar una suma que compruebe el estado de los datos en la memoria.
	Se usa la variable estado de cada checkpoint y la variable jugando de info.

	Se entiende que estos datos son minimamente utiles para saber si la memoria no esta corrupta,
	ya que en casos de prueba siempre se altero la variable estado a numeros mayores que 1000 y estado
	solo puede ser 0 o 1.
*/
/*** BeginHeader USERBLOCK_generateCheckSum */
int USERBLOCK_generateCheckSum();
/*** EndHeader */
int USERBLOCK_generateCheckSum(){
	int result;
	int i;
	CheckPoint * lista;
	lista=storedInfo.checkpoints;
	result = 0;
	for (i = 0; i < CANTIDAD_CHECKPOINTS; i++){
		result += (*lista).estado;
		lista++;
	}
	return result;
}

/*
	Funcion que compara un checksum dado por parametro con el checksum actual de los datos
	de la estructura global storedInfo.
	Si son iguales quiere decir que los datos son coherentes entre si, entonces devuelve 1
	Si no devuelve 0
*/
/*** BeginHeader USERBLOCK_verify */
int USERBLOCK_verify(int sum);
/*** EndHeader */
int USERBLOCK_verify(int sum){
	if(sum==USERBLOCK_generateCheckSum()){
		return 1;
	}
	return 0;
}

/*
	Funcion encargada de salvar la estructura actual storedInfo en la memoria y generar su
	correspondiente checksum
*/
/*** BeginHeader USERBLOCK_save */
int USERBLOCK_save();
/*** EndHeader */
int USERBLOCK_save(){
	int i;
	memset(&storedInfo,0,sizeof(storedInfo));
	for(i=0;i<CANTIDAD_CHECKPOINTS;i++){
		storedInfo.checkpoints[i].longitud = listaCheckPoints[i].longitud;
		storedInfo.checkpoints[i].latitud = listaCheckPoints[i].latitud;
		storedInfo.checkpoints[i].estado = listaCheckPoints[i].estado;
	}
	storedInfo.checksum = USERBLOCK_generateCheckSum(listaCheckPoints);
	if(writeUserBlock(USERBLOCK_NUMBER,&storedInfo,sizeof(storedInfo))!=0){
		printf("Couldn't save\n");
		return 0;
	}
	return 1;
}
