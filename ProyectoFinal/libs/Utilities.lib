/*** BeginHeader UT_ASCIItoCharNum */
char UT_ASCIItoCharNum( char p_input );
/*** EndHeader */
char UT_ASCIItoCharNum( char p_input )
{
	if( p_input >= '0' && p_input <= '9' )
	{
		return (p_input-'0');
	}
	else if( p_input >= 'A' && p_input <= 'F')
	{
		return (p_input + 10 - 'A');
	}
	else
	{
		return -1;
	}
}

/*
	Funcion encargada de substraer una poricion de un string dado una posicion inicial y una final
	Se recibe el buffer donde se escribira la poricion de string a cortar.
	El buffer string se mantiene inmutable
	El buffer resultado contendra la poricion cortada de string
*/
/*** BeginHeader UT_cortarString */
void UT_cortarString(char * string, int inicio, int fin, char * resultado);
/*** EndHeader */
void UT_cortarString(char * string, int inicio, int fin, char * resultado){
	int i;
	for(i=0;i<inicio;i++){
		string++;
	}
	for(i=0;i<fin-inicio;i++){
		(*resultado)=(*string);
		resultado++;
		string++;
	}
	(*resultado) = '\0';
}

/*
		Funcion encargada de comprobar la existencia de una ocurrencia de un string obtenido por parametro
		contra otro string obtenido por parametro
		Devuelve 1 si waiting existe dentro de received
		Si no devuelve 0
*/
/*** BeginHeader UT_isEqual */
int UT_isEqual(char* received, char* waiting);
/*** EndHeader */
//Funcion que compara dos string
int UT_isEqual(char* received, char* waiting){
	if(strstr(received, waiting) != NULL){
		return 1;
	} else {
		return 0;
	}
}
