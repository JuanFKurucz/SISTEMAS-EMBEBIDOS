/*** BeginHeader */
tcp_Socket echosock;
/*** EndHeader */

/*** BeginHeader ETHERNET_imprimir */
void ETHERNET_imprimir(char *s);
/*** EndHeader */
//Funcion que en base al tipo pasado por parametro
//escribe por consola o por hercules
//En el caso de que sea un 1 ser? por Hercules
void ETHERNET_imprimir(char *s){
  sock_fastwrite(&echosock, s, strlen(s));
}


/*** BeginHeader ETHERNET_preguntar */
void ETHERNET_preguntar(char *pregunta, char *respuesta);
/*** EndHeader */

//Funcion que imprime una pregunta y espera por la respuesta cargando el texto al puntero de char respuesta
void ETHERNET_preguntar(char *pregunta, char *respuesta){
	int bytes;

	ETHERNET_imprimir(pregunta);
	while (tcp_tick(&echosock))
	{
		bytes = sock_dataready(&echosock);
		if (bytes > 0)
		{
			if (bytes > MAX_BUFSIZE)
			{
				bytes = MAX_BUFSIZE;
			}
			sock_fastread(&echosock, respuesta, bytes);
			sock_flush(&echosock);
			respuesta[bytes] = '\0';
			return;
		}
		OSTimeDlyHMSM(0,0,0,100);
	}
}

/*"1	2	.	4	5	;	1	2	.	4	5		/		1		2		.		4		5		;		1		2		.		4		5"
// 0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22
i=0	0,5			5
i=1 6,11		5*2+1
i=2	12,17		5*3+2
i=3 18,23		5*4+3
*/
/*** BeginHeader ETHERNET_convertirCheckPoints */
int ETHERNET_convertirCheckPoints(char * respuesta);
/*** EndHeader */
int ETHERNET_convertirCheckPoints(char * respuesta){
	int i;
	char miCorte[6];
	float datos[12];
	int largoCorte;
	memset(miCorte, 0, sizeof(miCorte));
	memset(datos, 0, sizeof(datos));
	for(i=0;i<12;i++){
		memset(miCorte, 0, sizeof(miCorte));
		UT_cortarString(respuesta,6*i,5*(i+1)+i,miCorte);
    if(strlen(miCorte)==0){
      return 1;
    }
		datos[i] = atof(miCorte);
    if(_xtoxErr == 1){
      return 1;
    }
	}
	memset(listaCheckPoints, 0, sizeof(listaCheckPoints));
	for(i=0;i<6;i++){
		listaCheckPoints[i].latitud=datos[i*2];
		listaCheckPoints[i].longitud=datos[i*2+1];
	}
  return 0;
}

/*** BeginHeader ETHERNET_main */
void ETHERNET_main(void *data);
/*** EndHeader */
void ETHERNET_main(void* data){
	char respuesta[MAX_BUFSIZE];
  int err;

	while(1){
    printf("Task debugg: ETHERNET_main start\n");
		while (!sock_established(&echosock))
		{
			OSTimeDlyHMSM(0,0,0,100);
		}
		memset(respuesta,0,sizeof(respuesta));
		ETHERNET_preguntar("Ingrese los datos (lat;lon/lat;long/lat;long/lat;long/lat;long/lat;long)\n",respuesta);
  	ETHERNET_imprimir("Calculando\n");
		err=ETHERNET_convertirCheckPoints(respuesta);
    if(err == 0){
      memset(respuesta,0,sizeof(respuesta));
  		ETHERNET_preguntar("Datos guardados correctamente, desea terminar? (s/n)\n",respuesta);
      if(UT_isEqual(respuesta,"s")){
        ETHERNET_imprimir("Jugador listo, hasta luego\n");
        OSTimeDlyHMSM(0,0,0,500);
        tcp_abort(&echosock);
        OSTaskDel(OS_PRIORIDAD_ETHERNET_MANTENER);
        OSTaskDel(OS_PRIO_SELF);
      }
    } else {
      ETHERNET_imprimir("Datos erroneos, intente nuevamente\n");
    }
		OSTimeDlyHMSM(0,0,0,100);
	}
}

/*** BeginHeader ETHERNET_mantener */
void ETHERNET_mantener(void *data);
/*** EndHeader */
//Funcion que mantiene el Ethernet prendido
void ETHERNET_mantener(void *data){
	while(1){
    printf("Task debugg: ETHERNET_mantener start\n");
		tcp_tick(NULL);
		OSTimeDlyHMSM(0,0,0,10);
    //printf("Task debugg: ETHERNET_mantener end\n");
	}
}

/*** BeginHeader ETHERNET_iniciar */
void ETHERNET_iniciar();
/*** EndHeader */
//Establecer la conexi?n
void ETHERNET_iniciar(){
	sock_init();
	tcp_listen(&echosock, PORT, 0, 0, NULL, 0);
	sock_mode(&echosock, TCP_MODE_ASCII);
}
